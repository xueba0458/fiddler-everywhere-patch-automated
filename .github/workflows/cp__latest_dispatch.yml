name: Latest Version - Workflow Dispatch

on:
  workflow_dispatch:

jobs:
  scrape_fe_version:
    runs-on: windows-latest
    outputs:
      scraped_version: ${{ steps.set_scraped_version.outputs.scraped_version }}

    env:
      NODE_JS_VERSION: 22.9.0

    steps:
      - uses: actions/checkout@v4
      
      - name: Use Node.js ${{ env.NODE_JS_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_JS_VERSION }}

      - name: Cache Node.js dependencies
        uses: actions/cache@v4
        with:
          path: utils/fe-version-scraper/node_modules
          key: ${{ runner.os }}-node-${{ env.NODE_JS_VERSION }}-${{ hashFiles('utils/fe-version-scraper/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.NODE_JS_VERSION }}-

      - name: Install Node.js dependencies
        run: npm ci
        working-directory: utils/fe-version-scraper

      - name: Run the Node.js script
        run: node .
        working-directory: utils/fe-version-scraper

      - name: Read & Set Env
        id: set_scraped_version
        run: |
          $fileContent = Get-Content -Path "utils/fe-version-scraper/latest_version.txt" -Raw
          echo "scraped_version=$fileContent" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
   
  download-yukihana-patch:
    runs-on: windows-latest
    needs: 
      - scrape_fe_version

    env: 
      SCRAPED_VERSION: ${{ needs.scrape_fe_version.outputs.scraped_version }}
      
    outputs:
      is-compatible-cont: ${{ steps.is-compatible-cont.outputs.is-compatible-cont }}
      yukihana-fiddler-name: ${{ steps.yukihana-fiddler-name.outputs.yukihana-fiddler-name }}

    steps:
      - name: Compare SCRAPED_VERSION with 5.17.0
        id: scraped_version_check
        run: |
          $scrapedVersion = $env:SCRAPED_VERSION
          $compareVersion = "5.17.0"
   
          if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
              if ([version]$scrapedVersion -ge [version]$compareVersion) {
                  echo "IS_COMPATIBLE_CONT=true" | Out-File -Append -FilePath $env:GITHUB_ENV
              } else {
                  echo "IS_COMPATIBLE_CONT=false" | Out-File -Append -FilePath $env:GITHUB_ENV
              }
          } else {
              echo "IS_COMPATIBLE_CONT=false" | Out-File -Append -FilePath $env:GITHUB_ENV
          }
        
        shell: pwsh

      - name: Set IS_COMPATIBLE_CONT as Output
        id: is-compatible-cont
        run: echo "is-compatible-cont=${{ env.IS_COMPATIBLE_CONT }}" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
        
      - name: Set Yukihana fiddler name (>= 5.17.0)
        if: env.IS_COMPATIBLE_CONT == 'true'
        run: echo "YUKIHANA_FIDDLER_NAME=fiddler" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Set Yukihana fiddler name (< 5.17.0)
        if: env.IS_COMPATIBLE_CONT == 'false'
        run: echo "YUKIHANA_FIDDLER_NAME=libfiddler" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Set YUKIHANA_FIDDLER_NAME as Output
        id: yukihana-fiddler-name
        run: echo "yukihana-fiddler-name=${{ env.YUKIHANA_FIDDLER_NAME }}" | Out-File -Append -FilePath $env:GITHUB_OUTPUT

      - name: Create yukihana directory
        run: |
          if (-Not (Test-Path "yukihana")) {
            New-Item -ItemType Directory -Path "yukihana"
          }
        shell: pwsh

      - name: Set Yukihana Release (>= 5.17.0)
        if: env.IS_COMPATIBLE_CONT == 'true'
        run: echo "YUKIHANA_RELEASE=continuous" | Out-File -Append -FilePath $env:GITHUB_ENV

      - name: Set Yukihana Release (< 5.17.0) 
        if: env.IS_COMPATIBLE_CONT == 'false'
        run: echo "YUKIHANA_RELEASE=v1.0.9" | Out-File -Append -FilePath $env:GITHUB_ENV
        
      - name: Download Yukihana Patch
        run: |
          try {
            # Build the download URLs
            $yukihanaFiddlerUrl = "https://github.com/project-yukihana/Yukihana-patch/releases/download/$env:YUKIHANA_RELEASE/yukihana-$env:YUKIHANA_FIDDLER_NAME-win32-x86_64-$env:YUKIHANA_RELEASE.dll"
            $yukihanaHostPolicyUrl = "https://github.com/project-yukihana/Yukihana-patch/releases/download/$env:YUKIHANA_RELEASE/yukihana-hostpolicy-win32-x86_64-$env:YUKIHANA_RELEASE.dll"
            
            # Print the URLs to ensure they're correct
            Write-Host "Downloading files from $env:YUKIHANA_RELEASE"
            Write-Host "Yukihana Fiddler URL: $yukihanaFiddlerUrl"
            Write-Host "Yukihana HostPolicy URL: $yukihanaHostPolicyUrl"

            # Download the files
            Invoke-WebRequest -Uri $yukihanaFiddlerUrl -OutFile "yukihana\$env:YUKIHANA_FIDDLER_NAME.dll"
            Invoke-WebRequest -Uri $yukihanaHostPolicyUrl -OutFile "yukihana\hostpolicy.dll"
          }
          catch {
            Write-Error "Failed to download the patch files. Error details: $_"
            exit 1
          }
        shell: pwsh
      
      - name: Upload yukihana folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: yukihana-patch
          path: yukihana/
          if-no-files-found: error

  download-msojocs-server:
    runs-on: windows-latest

    steps:
      - name: Set up Git
        run: |
          git init
          git remote add origin https://github.com/msojocs/fiddler-everywhere-enhance.git
          git config core.sparseCheckout true

      - name: Configure sparse-checkout to download the server directory
        run: |
          echo "server" | Out-File -Append -FilePath .git\info\sparse-checkout
          git pull origin master

      - name: Move the downloaded directory to the target folder
        run: |
          mkdir -p msojocs
          Move-Item -Path server -Destination msojocs/

      - name: List files in the msojocs/server directory
        run: Get-ChildItem -Path msojocs\server

      - name: Upload msojocs folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: msojocs-patch
          path: msojocs/
          if-no-files-found: error

  download-fiddler-everywhere:
    runs-on: windows-latest

    needs: 
      - scrape_fe_version

    steps:
      - name: Build URL & Download
        run: |
          # Retrieve the scraped version from the previous step
          $scrapedVersion = "${{ needs.scrape_fe_version.outputs.scraped_version }}"
          
          # Check if the scraped version is available
          if (-not [string]::IsNullOrEmpty($scrapedVersion)) {
            $downloadUrl = "https://downloads.getfiddler.com/win/Fiddler%20Everywhere%20$scrapedVersion.exe"
          
            Write-Host "Download URL: $downloadUrl"

            Invoke-WebRequest -Uri $downloadUrl -OutFile "FiddlerEverywhereSetup.exe"
            
          } else {
            Write-Host "SCRAPED_VERSION is empty or not set"
            exit 1
          }
        shell: pwsh

      - name: Extract exe 
        run: 7z x "FiddlerEverywhereSetup.exe" -ofe_extracted

      - name: Extract app64 
        run: 7z x "fe_extracted/`$PLUGINSDIR/app-64.7z" -ofe_app64
        shell: pwsh
        
      - name: Upload Fiddler Everywhere Extracted folder as an artifact
        uses: actions/upload-artifact@v4
        with:
          name: fe_app64
          path: fe_app64/
          if-no-files-found: error

  patch_fe:
    runs-on: windows-latest

    needs:
      - download-yukihana-patch
      - download-msojocs-server
      - download-fiddler-everywhere
      - scrape_fe_version

    env:
      SCRAPED_VERSION: ${{ needs.scrape_fe_version.outputs.scraped_version }}

    outputs:
      patched-fe-name: ${{ steps.rename-fe.outputs.patched-fe-name }}
      
    steps:
      - name: Download Yukuhana-Patch
        uses: actions/download-artifact@v4
        with:
          name: yukihana-patch
          path: yukihana-patch

      - name: Download msojocs-Server
        uses: actions/download-artifact@v4
        with:
          name: msojocs-patch
          path: msojocs-patch

      - name: Download FE
        uses: actions/download-artifact@v4
        with:
          name: fe_app64
          path: fe_app64

      - name: List the contents of the downloaded artifacts
        run: |
          Get-ChildItem -Recurse yukihana-patch
          Get-ChildItem -Recurse msojocs-patch
          Get-ChildItem -Recurse fe_app64
        shell: pwsh

      - name: Rename main FE folder
        run: Rename-Item -Path "fe_app64" -NewName "FE"

      - name: Patch fiddler.dll / libfiddler.dll
        run: |
          $original_fiddler = "FE/${{ needs.download-yukihana-patch.outputs.yukihana-fiddler-name }}.dll"
          $yukihana_fiddler = "yukihana-patch/${{ needs.download-yukihana-patch.outputs.yukihana-fiddler-name }}.dll"
          
          if ((Test-Path $original_fiddler) -and (Test-Path $yukihana_fiddler)) {
            Copy-Item -Path $yukihana_fiddler -Destination $original_fiddler -Force
            Write-Host "Replaced $original_fiddler with $yukihana_fiddler"
          } else {
            Write-Host "fiddler / libfiddler or yukihana patch not found"
          }
        shell: pwsh

      - name: Patch hostpolicy.dll
        run: |
          $original_hostpolicy = "FE/resources/app/out/WebServer/hostpolicy.dll"
          $original_copy_hostpolicy = "FE/resources/app/out/WebServer/hostpolicy.original.dll"
          $yukihana_hostpolicy = "yukihana-patch/hostpolicy.dll"

          if ((Test-Path $original_hostpolicy) -and (Test-Path $yukihana_hostpolicy)) {
            Move-Item -Path $original_hostpolicy -Destination $original_copy_hostpolicy
            Copy-Item -Path $yukihana_hostpolicy -Destination $original_hostpolicy
            Write-Host "Renamed $original_fiddler with $original_copy_hostpolicy & Applied Yukihana Patch"
          } else {
            Write-Host "original hostpolicy.dll or yukihana hotstpolicy not found"
          }

      - name: Clean yukihana-patch
        run: |
          if (Test-Path yukihana-patch) {
            Remove-Item -Path "yukihana-patch" -Recurse
          } else {
            Write-Host "yukihana-patch Folder not found"
          }

      - name: Copy Server Folder
        run: |
          $source_server_folder = "msojocs-patch/server/file"
          $destination_server_folder = "FE/resources/app/out"
          
          if (Test-Path $source_server_folder) {
            Copy-Item -Path $source_server_folder -Destination $destination_server_folder -Recurse
          } else {
            Write-Host "Source Server Folder not found"
          }
        shell: pwsh

      - name: Patch main.XXX.js to main.XXX.original.js
        run: |
          $directory = 'FE/resources/app/out/WebServer/ClientApp/dist'
          
          $source_main = Get-ChildItem -Path $directory -Filter "main*" | Where-Object { -not $_.PSIsContainer }
    
          if ($source_main) {
              # Extract original file name without extension
              $originalName = [System.IO.Path]::GetFileNameWithoutExtension($source_main.Name)
              $originalFullPath = $source_main.FullName
        
              # Define the new file name in the format "original-name.original.js"
              $new_main_name = "$originalName.original.js"
        
              # Rename the file
              Copy-Item -Path $originalFullPath -Destination (Join-Path -Path $directory -ChildPath $new_main_name)              
              Write-Host "File renamed from $($source_main.Name) to $(Join-Path -Path $directory -ChildPath $new_main_name)"

              Write-Host "Finding and Replacing now"

              $source_content = Get-Content -Path $originalFullPath -Raw

              $searchText1 = "https://api.getfiddler.com"
              $replaceText1 = "https://fd.xueba666.top/api.getfiddler.com"
              $updatedText1 = $source_content -replace [regex]::Escape($searchText1), $replaceText1

              $searchText2 = "https://identity.getfiddler.com"
              $replaceText2 = "https://fd.xueba666.top/identity.getfiddler.com"
              $finalUpdatedText = $updatedText1 -replace [regex]::Escape($searchText2), $replaceText2

              # Overwrite the file with the new content
              Set-Content -Path $originalFullPath -Value $finalUpdatedText

              echo "MAIN_XXX_NAME=$originalName" >> $env:GITHUB_ENV            
          } else {
            Write-Host "No file found starting with 'main' in the specified directory. (Main,XXX.js)"
          }

      - name: Clean msojocs-patch
        run: |
          if (Test-Path msojocs-patch) {
            Remove-Item -Path "msojocs-patch" -Recurse
          } else {
            Write-Host "msojocs-patch Folder not found"
          }
        
      - name: Add patch.json
        run: |
          $patch_json = "FE/resources/app/out/WebServer/patch.json"
          
          $jsonContent = @{
            "ClientApp\\dist\\$env:MAIN_XXX_NAME.js" = @{
              "target" = "ClientApp\\dist\\$env:MAIN_XXX_NAME.original.js"
              "content" = ""
              "cur" = 0
              "start" = 0
              "end" = 1
            }
          }

          # Convert the PowerShell object to JSON format
          $jsonString = $jsonContent | ConvertTo-Json -Depth 10

          # Write the JSON string to the file
          $jsonString | Set-Content -Path $patch_json -Encoding UTF8
          
          # Output message
          Write-Host "JSON file created successfully at $patch_json"

      - name: Rename FE 
        id: rename-fe
        run: |
          if (Test-Path FE) {
            $newName = "Fiddler-Everywhere-V$env:SCRAPED_VERSION-Patched"
            
            Rename-Item -Path "FE" -NewName $newName
            
            echo "patched-fe-name=$newName" | Out-File -Append -FilePath $env:GITHUB_OUTPUT
          } else {
            Write-Host "FE Folder not found!?"
          }

      - name: Upload Artifact for Patched FE
        uses: actions/upload-artifact@v4
        with:
          name: "${{ steps.rename-fe.outputs.patched-fe-name }}"
          path: "${{ steps.rename-fe.outputs.patched-fe-name }}/"
          if-no-files-found: error
